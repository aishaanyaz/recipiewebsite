<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Dashboard - Healthy Treats</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Nunito:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #ff6b6b;
            --secondary-color: #ffd3d3;
            --accent-color: #4ecdc4;
            --text-color: #2d3436;
            --background-color: #f9f7f7;
            --nav-height: 70px;
        }

        body {
            background-color: var(--background-color);
            margin: 0;
            font-family: 'Nunito', sans-serif;
            color: var(--text-color);
        }
        
        .dashboard-header {
            background: var(--primary-color);
            padding: 3rem 2rem;
            color: white;
            margin-top: var(--nav-height);
        }

        .user-welcome {
            text-align: center;
            padding: 2rem 0;
        }

        .user-welcome h1 {
            font-size: 2.5rem;
            margin: 0;
            font-family: 'Pacifico', cursive;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .user-welcome p {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-top: 0.5rem;
        }

        .dashboard-nav {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 2rem;
        }

        .nav-button {
            background: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 25px;
            font-size: 1rem;
            color: var(--primary-color);
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .nav-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }

        .nav-button i {
            font-size: 1.2rem;
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .search-section {
            background: white;
            padding: 2rem;
            border-radius: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .search-box {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .search-box input {
            flex: 1;
            padding: 1rem;
            border: 2px solid #eee;
            border-radius: 25px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .search-box input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .search-box button {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0 2rem;
            border-radius: 25px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .search-box button:hover {
            background: #ff5252;
            transform: translateY(-2px);
        }

        .search-results {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .recipe-card {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .recipe-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        }

        .recipe-card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .recipe-info {
            padding: 1.5rem;
        }

        .recipe-info h3 {
            margin: 0 0 1rem 0;
            color: var(--text-color);
            font-size: 1.2rem;
        }

        .save-button {
            background: var(--accent-color);
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            width: 100%;
            justify-content: center;
        }

        .save-button:hover {
            background: #3dbdb4;
        }

        .save-button:disabled {
            background: #a8e6e2;
            cursor: not-allowed;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            display: none;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .quick-filters {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
            flex-wrap: wrap;
        }

        .filter-tag {
            background: #f8f9fa;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .filter-tag:hover {
            background: var(--secondary-color);
            color: white;
        }

        .no-results {
            text-align: center;
            padding: 3rem;
            color: #666;
        }

        .tracker-section {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .section-title {
            color: var(--text-color);
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
        }

        .tracker-header {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }

        .date-navigation {
            display: flex;
            align-items: center;
            gap: 1rem;
            background: #f8f9fa;
            padding: 0.5rem 1rem;
            border-radius: 12px;
        }

        .date-nav-btn {
            background: none;
            border: none;
            color: var(--primary-color);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .date-nav-btn:hover {
            background: var(--primary-color);
            color: white;
        }

        .tracker-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .chart-box {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

        .chart-box:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }

        .chart-box h3 {
            margin-bottom: 1rem;
            color: var(--text-color);
            font-size: 1.2rem;
            text-align: center;
        }

        .calorie-ring-container {
            position: relative;
            width: 200px;
            margin: 0 auto;
        }

        .calorie-center {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }

        .meal-form-box {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 1.5rem;
            grid-column: 2;
            grid-row: span 2;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-color);
            font-weight: 500;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #eee;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .submit-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 1rem;
            border-radius: 8px;
            width: 100%;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .meals-list-box {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 1.5rem;
            max-height: 400px;
            overflow-y: auto;
        }

        .meal-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #eee;
            transition: all 0.3s ease;
        }

        .meal-item:hover {
            background: white;
            transform: translateX(5px);
        }

        .meal-type {
            font-size: 0.9rem;
            color: var(--primary-color);
            background: var(--secondary-color);
            padding: 0.2rem 0.8rem;
            border-radius: 12px;
        }

        .meal-nutrients {
            display: flex;
            gap: 1rem;
            font-size: 0.9rem;
            color: #666;
        }

        /* Add new navigation styles */
        .top-nav {
            background: white;
            height: var(--nav-height);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            height: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2rem;
        }

        .nav-brand a {
            font-size: 1.5rem;
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 700;
        }

        .nav-links {
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .nav-links a {
            color: var(--text-color);
            text-decoration: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: color 0.3s ease;
        }

        .nav-links a:hover,
        .nav-links a.active {
            color: var(--primary-color);
        }

        .nav-btn {
            background: none;
            border: none;
            color: var(--text-color);
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .nav-btn:hover {
            background: #f1f1f1;
            color: var(--primary-color);
        }

        /* Update header styles */
        .dashboard-header {
            background: var(--primary-color);
            padding: 3rem 2rem;
            color: white;
            margin-top: var(--nav-height);
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
        }

        .header-content h1 {
            font-size: 2.5rem;
            margin: 0;
            font-weight: 700;
            font-family: 'Nunito', sans-serif;
        }

        .header-content p {
            font-size: 1.2rem;
            margin-top: 0.5rem;
            opacity: 0.9;
        }

        /* Update dashboard container margin */
        .dashboard-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        /* Add responsive styles */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .nav-container {
                padding: 0 1rem;
            }

            .dashboard-header {
                padding: 2rem 1rem;
            }

            .header-content h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <nav class="top-nav">
        <div class="nav-container">
            <div class="nav-brand">
                <a href="dashboard.html">Tasty Treats</a>
            </div>
            <div class="nav-links">
                
                <a href="dashboard.html" class="active"><i class="fas fa-home"></i> Dashboard</a>
                <a href="meal-planner.html"><i class="fas fa-calendar-alt"></i> Meal Planner</a>
                <a href="saved-recipes.html"><i class="fas fa-bookmark"></i> Saved Recipes</a>
                <button id="logout-btn" class="nav-btn"><i class="fas fa-sign-out-alt"></i> Logout</button>
            </div>
        </div>
        </nav>

    <div class="dashboard-header">
        <div class="header-content">
            <h1>Hello <span id="username">User</span></h1>
            <p>Welcome to tasty treats</p>
        </div>
    </div>

    <div class="dashboard-container">
        <div class="search-section">
            <div class="search-box">
                <input type="text" id="recipe-search" placeholder="Search for recipes... (e.g., chicken, pasta, vegetarian)">
                <button id="search-btn">
                    <i class="fas fa-search"></i> Search
                </button>
                        </div>
            <div class="quick-filters">
                <span class="filter-tag">🥗 Healthy</span>
                <span class="filter-tag">🕒 Quick & Easy</span>
                <span class="filter-tag">🌱 Vegetarian</span>
                <span class="filter-tag">🍝 Pasta</span>
                <span class="filter-tag">🥘 One Pot</span>
            </div>
            <div class="loading">
                <div class="loading-spinner"></div>
                <p>Finding delicious recipes...</p>
            </div>
            <div class="search-results" id="search-results">
                <!-- Results will be populated here -->
            </div>
        </div>

        <div class="tracker-section">
            <h2 class="section-title">Meal & Nutrition Tracker</h2>
            
            <div class="tracker-header">
                <div class="date-navigation">
                    <button onclick="changeDate(-1)" class="date-nav-btn">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <span id="currentDate">Today</span>
                    <button onclick="changeDate(1)" class="date-nav-btn">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
            
            <div class="tracker-grid">
                <!-- Charts Section -->
                <div class="charts-container">
                    <div class="chart-box">
                        <h3>Today's Calories</h3>
                        <div class="calorie-ring-container">
                            <canvas id="calorieRing"></canvas>
                            <div class="calorie-center">
                                <span id="currentCalories">0</span>
                                <small>of</small>
                                <span id="targetCalories">2000</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="chart-box">
                        <h3>Weekly Progress</h3>
                        <canvas id="weeklyProgress"></canvas>
                    </div>
                </div>

                <!-- Add Meal Form -->
                <div class="meal-form-box">
                    <h3>Add Meal</h3>
                    <form id="mealForm">
                        <div class="form-group">
                            <label>Meal Type</label>
                            <select name="mealType" required>
                                <option value="breakfast">Breakfast</option>
                                <option value="lunch">Lunch</option>
                                <option value="dinner">Dinner</option>
                                <option value="snack">Snack</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Food Item</label>
                            <input type="text" name="foodItem" placeholder="What did you eat?" required>
                        </div>
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Calories</label>
                                <input type="number" name="calories" required>
                            </div>
                            <div class="form-group">
                                <label>Protein (g)</label>
                                <input type="number" name="protein">
                            </div>
                            <div class="form-group">
                                <label>Carbs (g)</label>
                                <input type="number" name="carbs">
                            </div>
                            <div class="form-group">
                                <label>Fat (g)</label>
                                <input type="number" name="fat">
                            </div>
                        </div>
                        <button type="submit" class="submit-btn">
                            <i class="fas fa-plus"></i> Add Meal
                        </button>
        </form>
                </div>

                <!-- Today's Meals List -->
                <div class="meals-list-box">
                    <h3>Today's Meals</h3>
                    <div id="mealsList"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let currentDate = new Date();
        let calorieRingChart = null;
        let weeklyProgressChart = null;

        document.addEventListener('DOMContentLoaded', () => {
            initializeCharts();
            loadTodaysMeals();
            loadWeeklyStats();
            setupMealForm();
            updateDateDisplay();
        });

        function initializeCharts() {
            // Initialize Calorie Ring Chart
            const ringCtx = document.getElementById('calorieRing').getContext('2d');
            calorieRingChart = new Chart(ringCtx, {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: [0, 2000],
                        backgroundColor: ['#FF6B6B', '#f8f9fa']
                    }]
                },
                options: {
                    cutout: '80%',
                    responsive: true,
                    maintainAspectRatio: true
                }
            });

            // Initialize Weekly Progress Chart
            const weeklyCtx = document.getElementById('weeklyProgress').getContext('2d');
            weeklyProgressChart = new Chart(weeklyCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Calories',
                        data: [],
                        borderColor: '#FF6B6B',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function updateDateDisplay() {
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            document.getElementById('currentDate').textContent = currentDate.toLocaleDateString(undefined, options);
        }

        function changeDate(days) {
            currentDate.setDate(currentDate.getDate() + days);
            updateDateDisplay();
            loadTodaysMeals();
        }

        async function loadTodaysMeals() {
            const user = JSON.parse(localStorage.getItem('user'));
            const dateStr = currentDate.toISOString().split('T')[0];

            try {
                const response = await fetch(`http://127.0.0.1:5000/get-meals/${user.id}?date=${dateStr}`);
                if (!response.ok) throw new Error('Failed to fetch meals');
                
                const meals = await response.json();
                updateMealsList(meals);
                updateNutritionSummary(meals);
            } catch (error) {
                console.error('Error loading meals:', error);
            }
        }

        function updateMealsList(meals) {
            const container = document.getElementById('mealsList');
            container.innerHTML = '';

            meals.forEach(meal => {
                const mealElement = document.createElement('div');
                mealElement.className = 'meal-item';
                mealElement.innerHTML = `
                    <div class="meal-info">
                        <h4>${meal.food_item}</h4>
                        <span class="meal-type">${meal.meal_type}</span>
                    </div>
                    <div class="meal-nutrients">
                        <span>${meal.calories} kcal</span>
                        <span>${meal.protein}g protein</span>
                        <span>${meal.carbs}g carbs</span>
                        <span>${meal.fat}g fat</span>
                    </div>
                `;
                container.appendChild(mealElement);
            });
        }

        function updateNutritionSummary(meals) {
            let totalCalories = 0, totalProtein = 0, totalCarbs = 0, totalFat = 0;
            const targetCalories = 2000;

            meals.forEach(meal => {
                totalCalories += meal.calories;
                totalProtein += meal.protein || 0;
                totalCarbs += meal.carbs || 0;
                totalFat += meal.fat || 0;
            });

            // Update ring chart
            calorieRingChart.data.datasets[0].data = [totalCalories, Math.max(0, targetCalories - totalCalories)];
            calorieRingChart.update();

            // Update nutrition bars
            document.getElementById('currentCalories').textContent = totalCalories;
            document.getElementById('proteinProgress').style.width = `${(totalProtein / 50) * 100}%`;
            document.getElementById('carbsProgress').style.width = `${(totalCarbs / 250) * 100}%`;
            document.getElementById('fatProgress').style.width = `${(totalFat / 65) * 100}%`;

            document.getElementById('proteinValue').textContent = `${totalProtein}g/50g`;
            document.getElementById('carbsValue').textContent = `${totalCarbs}g/250g`;
            document.getElementById('fatValue').textContent = `${totalFat}g/65g`;
        }

        async function loadWeeklyStats() {
            const user = JSON.parse(localStorage.getItem('user'));

            try {
                const response = await fetch(`http://127.0.0.1:5000/get-weekly-stats/${user.id}`);
                const stats = await response.json();

                const labels = stats.map(day => new Date(day.date_added).toLocaleDateString('en-US', { weekday: 'short' }));
                const calories = stats.map(day => day.total_calories);

                weeklyProgressChart.data.labels = labels;
                weeklyProgressChart.data.datasets[0].data = calories;
                weeklyProgressChart.update();
            } catch (error) {
                console.error('Error loading weekly stats:', error);
            }
        }

        function setupMealForm() {
            document.getElementById('mealForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const user = JSON.parse(localStorage.getItem('user'));
                const formData = new FormData(e.target);

                try {
                    const response = await fetch('http://127.0.0.1:5000/add-meal', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            userId: user.id,
                            mealType: formData.get('mealType'),
                            foodItem: formData.get('foodItem'),
                            calories: parseInt(formData.get('calories')),
                            protein: parseFloat(formData.get('protein')) || 0,
                            carbs: parseFloat(formData.get('carbs')) || 0,
                            fat: parseFloat(formData.get('fat')) || 0,
                            date: currentDate.toISOString().split('T')[0]
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to add meal');
                    }

                    e.target.reset();
                    loadTodaysMeals();
                    loadWeeklyStats();
                } catch (error) {
                    console.error('Error adding meal:', error);
                    alert('Failed to add meal. Please try again.');
                }
            });
        }

        // Check if user is logged in
        document.addEventListener('DOMContentLoaded', () => {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                window.location.href = 'login.html';
                return;
            }
            
            document.getElementById('username').textContent = user.username;
        });

        // Logout functionality
        document.getElementById('logout-btn').addEventListener('click', (e) => {
            e.preventDefault();
            localStorage.removeItem('user');
            window.location.href = 'login.html';
        });

        // Recipe search functionality
        const API_KEY = 'c964e9508dad440cb0220a49bd3e0b1e';
        const searchBtn = document.getElementById('search-btn');
        const searchInput = document.getElementById('recipe-search');
        const searchResults = document.getElementById('search-results');
        const loading = document.querySelector('.loading');

        searchBtn.addEventListener('click', async () => {
            const query = searchInput.value.trim();
            if (!query) return;

            loading.style.display = 'block';
            searchResults.innerHTML = '';

            try {
                const response = await fetch(
                    `https://api.spoonacular.com/recipes/complexSearch?apiKey=${API_KEY}&query=${query}&number=9&addRecipeInformation=true`
                );
                const data = await response.json();

                data.results.forEach(recipe => {
                    const card = document.createElement('div');
                    card.className = 'recipe-card';
                    card.innerHTML = `
                        <img src="${recipe.image}" alt="${recipe.title}">
                        <div class="recipe-info">
                            <h3>${recipe.title}</h3>
                            <button class="save-button" data-recipe-id="${recipe.id}">
                                <i class="fas fa-bookmark"></i> Save Recipe
                            </button>
                        </div>
                    `;

                    // Add click event for recipe details
                    card.querySelector('img').addEventListener('click', () => {
                        window.location.href = `recipe-details.html?id=${recipe.id}`;
                    });

                    // Add click event for save button
                    card.querySelector('.save-button').addEventListener('click', async (e) => {
                        e.stopPropagation();
                        const recipeId = e.target.dataset.recipeId;
                        await saveRecipe(recipeId);
                        e.target.disabled = true;
                        e.target.innerHTML = '<i class="fas fa-check"></i> Saved';
                    });

                    searchResults.appendChild(card);
                });
            } catch (error) {
                console.error('Error:', error);
                searchResults.innerHTML = '<p>Error loading recipes. Please try again.</p>';
            } finally {
                loading.style.display = 'none';
            }
        });

        // Save recipe function
        async function saveRecipe(recipeId) {
            try {
                const user = JSON.parse(localStorage.getItem('user'));
                const response = await fetch('http://127.0.0.1:5000/save-recipe', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId: user.id,
                        recipeId: recipeId
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to save recipe');
                }

                alert('Recipe saved successfully!');
            } catch (error) {
                console.error('Error saving recipe:', error);
                alert('Failed to save recipe. Please try again.');
            }
        }
    </script>
</body>
</html>
